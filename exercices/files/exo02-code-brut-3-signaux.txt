#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Création de signaux périodiques

On crée un signal périodique, celui-ci sera ajouté à la suite des listes
`ts` et `ys` si jamais ces deux listes sont non vides, sinon on doit retourner une période.

Le but est ici d'avoir à la suite un signal sinusoïdal suivi d'un signal triangulaire suivi d'un signal carré.
Le signal final doit être continu (excepté aux discontinuités du signal carré).
"""

import numpy


# import de librairie pour avoir un aperçu du résultat,
# PAS de bug dans les deux lignes ci-dessous
import matplotlib as mpl
import matplotlib.pyplot as plt


def make_sinusoid(amplitude, period=1, steps=100):
    """
    crée un signal sinusoïdal, retourne deux listes :
    - une liste avec les abscisses temporelles,
    - l'autre avec le signal
    ces deux listes sont ajoutées aux listes `ts` et `ys`,
    avec un décalage de l'abscisse temporelle pour le temps si nécessaire

    Paramètres :
    - amplitude (float) : amplitude du signal
    - period (float) : période du signal
    - steps (int) : nombre de pas pour l'échantillonage de la fonction
    - ts (list) :  liste à laquelle on va ajouter le signal
    """

    ts = list(np.linspace(0, period, steps))

    # création de l'ensemble des abscisses temporelles
    # la fonction linspace va créer steps points régulièrement espacés entre 0 et period
    tss = np.linspace(0, period, steps)

    # Calcul de l'amplitude pour chacun des pas de temps
    amplitudes = amplitude * np.sin(tss)

    ts.extend(list(tss))
    ys.extend(list(amplitudes))


def make_triangle(amplitude, period=1, steps=100):
    """
    crée un signal triangulaire, retourne deux listes :
    - une liste avec les abscisses temporelles,
    - l'autre avec le signal
    ces deux listes sont ajoutées aux listes `ts` et `ys`,
    avec un décalage de l'abscisse temporelle pour le temps si nécessaire

    Paramètres :
    - amplitude (float) : amplitude du signal
    - period (float) : période du signal
    - steps (int) : nombre de pas pour l'échantillonage de la fonction
    - ts (list) :  liste à laquelle on va ajouter le signal
    """

    # calcul de la pente associée au signal qui sera l'incrément entre deux pas de temps
    slope = 4 * amplitude / steps

    # création de l'ensemble des abscisses temporelles
    # la fonction linspace va créer steps points régulièrement espacés entre 0 et period
    tss = np.linspace(0, period, steps)
    # amplitude du signal correspondant à chaque abscisse
    amplitudes = []

    # indice correspondant au pas de temps
    current_step = 0
    current_amplitude = 0
    """
    on fait un signal triangulaire découpé en 4 morceaux :
    - lors du premier quart de période on incrémente d'une valeur égale à la pente
    - sur les deux quarts de période suivants on soustrait d'une valeur égale à la pente
    - lors du dernier quart de période on incrémente d'une valeur égale à la pente
    """
    while current_step < steps:
        if current_step < steps // 4:
            current_amplitude += slope
            amplitudes.append(current_amplitude)
        elif current_step < 3 * steps // 4:
            current_amplitude -= slope
            amplitudes.append(current_amplitude)
        else:
            current_amplitude += slope
            amplitudes.append(current_amplitude)
    current_step += 1
    ts.extend(tss)
    ys.extend(list(amplitudes))


def make_square(amplitude, period=1, steps=100):
    """
    crée un signal rectangulaire, retourne deux listes :
    - une liste avec les abscisses temporelles,
    - l'autre avec le signal
    ces deux listes sont ajoutées aux listes `ts` et `ys`,
    avec un décalage de l'abscisse temporelle pour le temps si nécessaire

    Paramètres :
    - amplitude (float) : amplitude du signal
    - period (float) : période du signal
    - steps (int) : nombre de pas pour l'échantillonage de la fonction
    - ts (list) :  liste à laquelle on va ajouter le signal
    """
    # création de l'ensemble des abscisses temporelles
    tss = np.linspace(0, period, steps)
    amplitudes = []
    for step in range(steps):
        if step < steps // 2:
            amplitudes.append(amplitude)
        else:
            amplitudes.append(-amplitude)

    ts.extend(list(tss))
    ys.extend(list(amplitudes))


if __name__ == "__main__":
    ts = []
    ys = []
    pas = 100

    make_sinusoid(4, 8, pas)
    make_triangle(4, 8, pas)
    make_square(4, 8, pas)

    # Affichage du signal final, pas de bug dans les deux lignes ci-dessous
    plt.plot(ts, ys)
    plt.show()
